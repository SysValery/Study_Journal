Вам потрібно створити веб-додаток на основі **Spring Web MVC** з використанням **MySQL** для бази даних,
яка дозволить викладачам створювати записи оцінок для студентів, вибираючи предмет та дату. Студенти зможуть переглядати свої оцінки.

### Основні функції системи:
1. **Авторизація та автентифікація**:
   - Викладач може створювати, редагувати та видаляти записи оцінок для студентів.
   - Студент може переглядати свої оцінки.
   - Реалізувати через **Spring Security** з двома ролями: **TEACHER** та **STUDENT**.

2. **Оцінки, предмети та дати**:
   - Викладач вибирає предмет, студента та дату для оцінки.
   - Оцінка супроводжується коментарем від викладача.

3. **Модель даних**:
   - **Student** (Студент): містить ID, ім'я, прізвище та список оцінок.
   - **Grade** (Оцінка): містить ID, оцінку, коментар, дату, предмет та студента.
   - **Teacher** (Викладач): містить ID, ім'я та прізвище.
   - **Subject** (Предмет): містить ID та назву предмета.

### Технічне завдання:
#### 1. Бекенд:
1. **Моделі даних**:
   - Створіть класи для **Student**, **Grade**, **Teacher**, **Subject**.

2. **Репозиторії**:
   - Використовуйте **Spring Data JPA** для створення репозиторіїв:
     - `StudentRepository`
     - `GradeRepository`
     - `TeacherRepository`
     - `SubjectRepository`

3. **Сервіси**:
   - Реалізуйте сервіси для бізнес-логіки:
     - `GradeService` для створення, редагування та видалення оцінок.
     - `StudentService` для управління студентами.
     - `TeacherService` для управління викладачами.
     - `SubjectService` для управління предметами.

4. **Контролери**:
   - **TeacherController**:
     - Можливість створення оцінок з вибором студента, предмета та дати.
     - Редагування та видалення оцінок.
     - Перегляд оцінок студентів за предметом і датою.
   - **StudentController**:
     - Перегляд своїх оцінок.

5. **Авторизація**:
   - Використовуйте **Spring Security** для реалізації ролей **TEACHER** та **STUDENT**.

6. **Конфігурація MySQL**:
   - Підключіть **MySQL** до проекту за допомогою **Spring Data JPA**.

7. **Валідація**:
   - Додайте валідацію для оцінок (значення від 0 до 100) і для обов'язкових полів (студент, предмет, дата).

#### 2. Фронтенд:
1. **Сторінки викладача**:
   - **Форма для створення оцінки**:
     - Поля: студент (вибір зі списку), предмет (вибір зі списку), дата (вибір через календар), оцінка, коментар.
   - **Форма для редагування оцінки**.
   - **Список студентів**: можливість перегляду та фільтрації оцінок за предметом і датою.

2. **Сторінка студента**:
   - Список його оцінок з коментарями, фільтрація за предметом або датою.

3. **Аутентифікація**:
   - Створіть сторінку логіну для студентів та викладачів.

#### 3. База даних:
- Використовуйте **MySQL** для зберігання даних.
- Створіть таблиці для студентів, викладачів, предметів та оцінок за допомогою Spring JPA.

### Критерії оцінювання:
1. Коректне налаштування MySQL і використання Spring Data JPA для взаємодії з базою даних.
2. Правильна реалізація вибору предмета та дати для оцінки.
3. Використання Spring Security для авторизації та розмежування доступу.
4. Структурованість і чистота коду.
5. Коректність роботи з даними через CRUD-операції.

**Термін виконання**: 2 тижні

Це тестове завдання допоможе оцінити вашу здатність працювати з Spring MVC, Spring Data JPA, Spring Security та MySQL для побудови повноцінного веб-додатку.